################################################################################
##
## Filename:	auto-data/allclocks.txt
## {{{
## Project:	10Gb Ethernet switch
##
## Purpose:	Describes/defines the various clocks used in the system.
##
## Creator:	Dan Gisselquist, Ph.D.
##		Gisselquist Technology, LLC
##
################################################################################
## }}}
## Copyright (C) 2023, Gisselquist Technology, LLC
## {{{
## This file is part of the ETH10G project.
##
## The ETH10G project contains free software and gateware, licensed under the
## terms of the 3rd version of the GNU General Public License as published by
## the Free Software Foundation.
##
## This project is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY or
## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
## for more details.
##
## You should have received a copy of the GNU General Public License along
## with this program.  (It's in the $(ROOT)/doc directory.  Run make with no
## target there if the PDF file isn't present.)  If not, see
## <http://www.gnu.org/licenses/> for a copy.
## }}}
## License:	GPL, v3, as defined and found on www.gnu.org,
## {{{
##		http://www.gnu.org/licenses/gpl.html
##
################################################################################
##
## }}}
@PREFIX=clk
## {{{
@CLOCK.NAME=clk
@CLOCK.WIRE=i_clk
@CLOCK.FREQUENCY=100000000
@TOP.PORTLIST=
@TOP.IODECL=
@TOP.DEFNS=
	wire		s_clk, s_reset, sysclk_locked, s_clk_nobuf,
			clk_feedback, clk_feedback_bufd,
			s_lcl_pixclk_nobuf, s_clk4x_unbuffered,
			s_clk300_nobuf, s_clk300;
	reg	[2:0]	pipe_reset;
	reg	[6:0]	refdly_reset_ctr;
	wire		refdly_ready;
@TOP.INSERT=
	////////////////////////////////////////////////////////////////////////
	//
	// Default clock setup
	// {{{
	// assign	s_clk=s_clk200;
	// assign	sysclk_locked = 1'b1;

	initial	pipe_reset = -1;
	always @(posedge s_clk or negedge sysclk_locked)
	if (!sysclk_locked)
		pipe_reset <= -1;
	else
		pipe_reset <= { pipe_reset[1:0], 1'b0 };

	assign	s_reset = pipe_reset[2];

	PLLE2_BASE #(
		.CLKFBOUT_MULT(6),		// 200MHz*6 => 1200MHz
		.CLKFBOUT_PHASE(0.0),
		.CLKIN1_PERIOD(5),
		.CLKOUT0_DIVIDE(12),		// Divide by 2x
		.CLKOUT1_DIVIDE(3),		// Multiply by 2x
		.CLKOUT2_DIVIDE(14),		// Multiply by 6/14
		.CLKOUT3_DIVIDE(4)		// Multiply by 3/2
	) u_syspll (
		.CLKOUT0(s_clk_nobuf),		// 100MHz
		.CLKOUT1(s_clk4x_unbuffered),	// 400MHz
		.CLKOUT2(s_lcl_pixclk_nobuf),	//  85.7MHz
		.CLKOUT3(s_clk300_nobuf),	// 300MHz
		//
		.CLKFBOUT(clk_feedback),
		.LOCKED(sysclk_locked),
		.CLKIN1(s_clk200),	// 200MHz
		.PWRDWN(1'b0),
		.CLKFBIN(clk_feedback_bufd)
	);

	BUFG	feedback_buffer(.I(clk_feedback), .O(clk_feedback_bufd));
	BUFG	sysclk_buffer(.I(s_clk_nobuf), .O(s_clk));
	BUFG	clk300_buf(.I(s_clk300_nobuf), .O(s_clk300));
	// BUFG	sysclk_buffer(.I(s_lcl_pixclk_nobuf), .O(s_lcl_pixclk));

	// IDELAYCTRL
	// {{{
	// Min reset width of 52ns, or 9 clocks at 150MHz
	always @(posedge s_clk300 or negedge sysclk_locked)
	if (!sysclk_locked)
		refdly_reset_ctr <= 0;
	else if (!refdly_reset_ctr[5])
		refdly_reset_ctr <= refdly_reset_ctr + 1;

	IDELAYCTRL
	u_dlyctrl (.REFCLK(s_clk300), .RST(refdly_reset_ctr[5]),
		.RDY(refdly_ready));
	// }}}
	// }}}
## }}}
@PREFIX=clk200
## {{{
@CLOCK.NAME=clk200
@CLOCK.WIRE=i_clk200
@CLOCK.FREQUENCY=200000000
@TOP.PORTLIST=
		i_clk_200mhz_p, i_clk_200mhz_n
@TOP.IODECL=
	input	wire	i_clk_200mhz_p, i_clk_200mhz_n;
@TOP.DEFNS=
	wire	s_clk200, s_clk200_unbuf;
@TOP.INSERT=
	////////////////////////////////////////////////////////////////////////
	//
	// 200MHz clock ingestion
	// {{{
	IBUFDS
	ibuf_ck200 (
		.I(i_clk_200mhz_p), .IB(i_clk_200mhz_n),
		.O(s_clk200_unbuf)
	);

	BUFG
	ck200_buf(.I(s_clk200_unbuf), .O(s_clk200));
	// }}}
@TOP.MAIN=
		s_clk200
@MAIN.PORTLIST=
		@$(CLOCK.WIRE)
@MAIN.DEFNS=
	// Verilator lint_off UNUSED
	input	wire	@$(CLOCK.WIRE);
	// Verilator lint_on  UNUSED
## }}}
@PREFIX=clk150
## {{{
## SATA clock
## @CLOCK.NAME=clk150
## @CLOCK.WIRE=i_clk150
## @CLOCK.FREQUENCY=150000000
## @TOP.PORTLIST=
##		i_clk_150mhz_p, i_clk_150mhz_n
## @TOP.IODECL=
##	input	wire	i_clk_150mhz_p, i_clk_150mhz_n;
## @TOP.DEFNS=
##	wire	s_clk150;
## @TOP.INSERT=
##	IBUFDS
##	ibuf_ck150 (
##		.I(i_clk_150mhz_p), .IB(i_clk_150mhz_n),
##		.O(s_clk150)
##	);
##
## @TOP.MAIN=
##		s_clk150
## @MAIN.PORTLIST=
##		@$(CLOCK.WIRE)
## @MAIN.DEFNS=
##	// Verilator lint_off UNUSED
##	input	wire	@$(CLOCK.WIRE);
##	// Verilator lint_on  UNUSED
## }}}
