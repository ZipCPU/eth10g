################################################################################
##
## Filename: 	sirefclk.txt
## {{{
## Project:	10Gb Ethernet switch
##
## Purpose:	Generates an output square wave at an arbitrary frequency for
##		use as a clock.  Actual clock frequency high *highly*
##	programmable.
##
## Creator:	Dan Gisselquist, Ph.D.
##		Gisselquist Technology, LLC
##
################################################################################
## }}}
## Copyright (C) 2023, Gisselquist Technology, LLC
## {{{
## This file is part of the ETH10G project.
##
## The ETH10G project contains free software and gateware, licensed under the
## terms of the 3rd version of the GNU General Public License as published by
## the Free Software Foundation.
##
## This project is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY or
## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
## for more details.
##
## You should have received a copy of the GNU General Public License along
## with this program.  (It's in the $(ROOT)/doc directory.  Run make with no
## target there if the PDF file isn't present.)  If not, see
## <http://www.gnu.org/licenses/> for a copy.
## }}}
## License:	GPL, v3, as defined and found on www.gnu.org,
## {{{
##		http://www.gnu.org/licenses/gpl.html
##
################################################################################
##
## }}}
@PREFIX=sirefclk
@DEVID=SIREFCLK
@ACCESS=SIREFCLK_ACCESS
@NADDR=1
@SLAVE.TYPE=SINGLE
@SLAVE.BUS=wb32
@IOPREFIX=io_siref_clk
@TOP.PORTLIST=
		@$(IOPREFIX)_p, @$(IOPREFIX)_n
@TOP.IODECL=
	inout	wire	@$(IOPREFIX)_p, @$(IOPREFIX)_n;
@TOP.DEFNS=
	// Definitions for the clock generation circuit
	wire		s_@$(PREFIX)_clk, w_@$(PREFIX)_ce;
			// w_@$(PREFIX)_pll_locked	-- not used at present
	wire		s_clk4x; // s_clk4x_unbuffered,
			// s_clksync, s_clksync_unbuffered;
	wire	[7:0]	w_@$(PREFIX)_word;
@TOP.INSERT=
	////////////////////////////////////////////////////////////////////////
	//
	// Clock generator for the Si5324
	// {{{
/*
	PLLE2_BASE #(
		// {{{
		.CLKFBOUT_MULT(8),
		.CLKFBOUT_PHASE(0.0),
		.CLKIN1_PERIOD(10),
		.CLKOUT0_DIVIDE(4),
		.CLKOUT1_DIVIDE(2)
		// }}}
	) gen_sysclk(
		// {{{
		.CLKIN1(i_clk),
		.CLKOUT0(s_clk_200mhz_unbuffered),
		.CLKOUT1(s_clk4x_unbuffered),
		.PWRDWN(1'b0), .RST(1'b0),
		.CLKFBOUT(sysclk_feedback),
		.CLKFBIN(sysclk_feedback),
		.LOCKED(sysclk_locked)
		// }}}
	);
*/
	// BUFG	clksync_buf(.I(s_clksync_unbuffered), .O(s_clk));
	BUFG	clk4x_buf(.I(s_clk4x_unbuffered), .O(s_clk4x));

	xgenclk #(
		.OPT_LCLCLOCK(1'b1)
	) u_x@$(PREFIX)(
		// {{{
		.i_clk(s_clk), .i_hsclk(s_clk4x),
		.i_ce(w_@$(PREFIX)_ce),
		.i_word(w_@$(PREFIX)_word),
		.o_pin({ @$(IOPREFIX)_p, @$(IOPREFIX)_n }),
		.o_clk(s_@$(PREFIX)_clk)
		// }}}
	);
	// }}}
@TOP.MAIN=
		// Clock Generator ports
		w_@$(PREFIX)_word, w_@$(PREFIX)_ce
@MAIN.PORTLIST=
		// Clock generator ports
		o_@$(PREFIX)_word, o_@$(PREFIX)_ce
@MAIN.IODECL=
	output	wire	[7:0]	o_@$(PREFIX)_word;
	output	wire		o_@$(PREFIX)_ce;
@MAIN.DEFNS=
	reg		r_@$(PREFIX)_en;
	reg	[29:0]	r_@$(PREFIX)_data;
	wire		w_@$(PREFIX)_unused_stb;
	reg		r_@$(PREFIX)_ack;
@MAIN.INSERT=
	////////////////////////////////////////////////////////////////////////
	//
	// Generated clock handling
	// {{{
	//
	// Set to 0x2f85_1ec0 for 148.5MHz
	//
	initial	r_@$(PREFIX)_en   = 1'b0;
	initial	r_@$(PREFIX)_data = 30'd20000;
	always @(posedge @$(SLAVE.BUS.CLOCK.WIRE))
	if (@$(SLAVE.PREFIX)_stb && @$(SLAVE.PREFIX)_we)
	begin
		if (@$(SLAVE.PREFIX)_sel[0])
			r_@$(PREFIX)_data[ 7: 0] <= @$(SLAVE.PREFIX)_data[ 7:0];
		if (@$(SLAVE.PREFIX)_sel[1])
			r_@$(PREFIX)_data[15: 8] <= @$(SLAVE.PREFIX)_data[15:8];
		if (@$(SLAVE.PREFIX)_sel[2])
			r_@$(PREFIX)_data[23:16] <= @$(SLAVE.PREFIX)_data[23:16];
		if (@$(SLAVE.PREFIX)_sel[3])
		begin
			r_@$(PREFIX)_en <= !@$(SLAVE.PREFIX)_data[31];
			r_@$(PREFIX)_data[29:24]<= @$(SLAVE.PREFIX)_data[29:24];
		end
	end

	always @(posedge @$(SLAVE.BUS.CLOCK.WIRE))
	if (@$(SLAVE.BUS.CLOCK.RESET))
		r_@$(PREFIX)_ack <= 1'b0;
	else
		r_@$(PREFIX)_ack <= @$(SLAVE.PREFIX)_stb;

	assign	@$(SLAVE.PREFIX)_ack   = r_@$(PREFIX)_ack;
	assign	@$(SLAVE.PREFIX)_stall = 1'b0;
	assign	@$(SLAVE.PREFIX)_idata = { !r_@$(PREFIX)_en,
						1'b0, r_@$(PREFIX)_data };
	assign	o_@$(PREFIX)_ce = r_@$(PREFIX)_en;

	genclk
	clock_generator(
		.i_clk(@$(SLAVE.BUS.CLOCK.WIRE)),
		.i_delay({ 2'b00, r_@$(PREFIX)_data[29:0] }),
		.o_word(o_@$(PREFIX)_word),
		.o_stb(w_@$(PREFIX)_unused_stb)
	);
	// }}}
@RTL.MAKE.GROUP=GENCLK
@RTL.MAKE.SUBD=.
@RTL.MAKE.FILES=genclk.v xgenclk.v
@REGS.N=1
@REGS.0= 0 R_@$(DEVID) @$(DEVID)
@BDEF.OSDEF=_BOARD_HAS_@$(DEVID)
@BDEF.IOTYPE=unsigned
@BDEF.IONAME=_@$(PREFIX)
@BDEF.OSVAL=static volatile @$(BDEF.IOTYPE) *const @$(BDEF.IONAME) = ((@$(BDEF.IOTYPE) *)@$[0x%08x](REGBASE));

