################################################################################
##
## Filename:	auto-data/hdmi.txt
## {{{
## Project:	10Gb Ethernet switch
##
## Purpose:	To direct the build of the autofpga automatically generated
##		files.  The various configuration files are the *.txt files
##	found in this directory.
##
## Creator:	Dan Gisselquist, Ph.D.
##		Gisselquist Technology, LLC
##
################################################################################
## }}}
## Copyright (C) 2023, Gisselquist Technology, LLC
## {{{
## This file is part of the ETH10G project.
##
## The ETH10G project contains free software and gateware, licensed under the
## terms of the 3rd version of the GNU General Public License as published by
## the Free Software Foundation.
##
## This project is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY or
## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
## for more details.
##
## You should have received a copy of the GNU General Public License along
## with this program.  (It's in the $(ROOT)/doc directory.  Run make with no
## target there if the PDF file isn't present.)  If not, see
## <http://www.gnu.org/licenses/> for a copy.
## }}}
## License:	GPL, v3, as defined and found on www.gnu.org,
## {{{
##		http://www.gnu.org/licenses/gpl.html
##
################################################################################
##
## }}}
@PREFIX=hdmi
@DEVID=VIDPIPE
@ACCESS=@$(DEVID)_ACCESS
@NADDR=1024
@SLAVE.BUS=wb32
@SLAVE.TYPE=OTHER
@MASTER.BUS=wbwide
@MASTER.TYPE=DMA
@MASTER.ANSPREFIX=dma_
@TOP.PORTLIST=
		i_hdmirx_clk_p, i_hdmirx_clk_n,
		i_hdmirx_p, i_hdmirx_n,
		o_hdmitx_clk_p, o_hdmitx_clk_n,
		o_hdmitx_p, o_hdmitx_n
@TOP.IODECL=
	input	wire		i_hdmirx_clk_p, i_hdmirx_clk_n;
	input	wire	[2:0]	i_hdmirx_p, i_hdmirx_n;
	output	wire		o_hdmitx_clk_p, o_hdmitx_clk_n;
	output	wire	[2:0]	o_hdmitx_p, o_hdmitx_n;
@TOP.DEFNS=
	wire	[9:0]	hdmirx_red, hdmirx_grn, hdmirx_blu;
	wire	[9:0]	hdmitx_red, hdmitx_grn, hdmitx_blu;
	wire	[1:0]	w_pxclk_sel;
	wire		hdmirx_clk, hdmi_ck, hdmi_serdes_clk;
	wire		pxrx_locked, pix_reset_n;
	wire [15-1:0]	set_hdmi_delay, actual_hdmi_delay;
@TOP.INSERT=
	////////////////////////////////////////////////////////////////////////
	//
	// HDMI
	// {{{

	// Start with clock generation and propagation
	// {{{
	xpxclk
	u_xpxclk (
		.i_sysclk(s_clk),		// System clock
		.i_cksel(w_pxclk_sel),		// Clock select switch
		//
		.i_hdmirx_clk_p(i_hdmirx_clk_p),	// HDMI RX input clock
		.i_hdmirx_clk_n(i_hdmirx_clk_n),
		.i_lcl_pixclk(s_lcl_pixclk_nobuf),	// Locally generated clk
		.i_siclk(s_siclk),			// Si5324 clock
		//
		.o_hdmick_locked(pxrx_locked),
		.o_hdmirx_clk(hdmirx_clk),	// Clk for measurement only
		.o_pixclk(hdmi_ck),		// Pixel clock
		.o_hdmick(hdmi_serdes_clk)	// HS pixel clock
	);
	// }}}

	// Ingest the HDMI data lines
	// {{{
	xhdmiin
	u_hdmirx_red(
		.i_clk(hdmi_ck), .i_hsclk(hdmi_serdes_clk),
		.i_reset_n(pix_reset_n),
		.i_delay(set_hdmi_delay[14:10]),
		.o_delay(actual_hdmi_delay[14:10]),
		.i_hs_wire({ i_hdmirx_p[2], i_hdmirx_n[2] }),
		.o_word(hdmirx_red)
	);

	xhdmiin
	u_hdmirx_grn(
		.i_clk(hdmi_ck), .i_hsclk(hdmi_serdes_clk),
		.i_reset_n(pix_reset_n),
		.i_delay(set_hdmi_delay[9:5]),
		.o_delay(actual_hdmi_delay[9:5]),
		.i_hs_wire({ i_hdmirx_p[1], i_hdmirx_n[1] }),
		.o_word(hdmirx_grn)
	);

	xhdmiin
	u_hdmirx_blu(
		.i_clk(hdmi_ck), .i_hsclk(hdmi_serdes_clk),
		.i_reset_n(pix_reset_n),
		.i_delay(set_hdmi_delay[4:0]),
		.o_delay(actual_hdmi_delay[4:0]),
		.i_hs_wire({ i_hdmirx_p[0], i_hdmirx_n[0] }),
		.o_word(hdmirx_blu)
	);
	// }}}

	// Output the HDMI TX data lines
	// {{{
	xhdmiout
	u_hdmitx_clk(
		.i_clk(hdmi_ck), .i_hsclk(hdmi_serdes_clk),
		.i_reset_n(pix_reset_n),
		.i_word(10'b11111_00000),
		.o_port({ o_hdmitx_clk_p, o_hdmitx_clk_n })
	);

	xhdmiout
	u_hdmitx_red(
		.i_clk(hdmi_ck), .i_hsclk(hdmi_serdes_clk),
		.i_reset_n(pix_reset_n),
		.i_word(hdmitx_red),
		.o_port({ o_hdmitx_p[2], o_hdmitx_n[2] })
	);

	xhdmiout
	u_hdmitx_grn(
		.i_clk(hdmi_ck), .i_hsclk(hdmi_serdes_clk),
		.i_reset_n(pix_reset_n),
		.i_word(hdmitx_grn),
		.o_port({ o_hdmitx_p[1], o_hdmitx_n[1] })
	);

	xhdmiout
	u_hdmitx_blu(
		.i_clk(hdmi_ck), .i_hsclk(hdmi_serdes_clk),
		.i_reset_n(pix_reset_n),
		.i_word(hdmitx_blu),
		.o_port({ o_hdmitx_p[0], o_hdmitx_n[0] })
	);
	// }}}

	// }}}
@TOP.MAIN=
		// HDMI control ports
		hdmirx_clk, hdmi_ck,	// Depending on s_siclk
		hdmirx_red, hdmirx_grn, hdmirx_blu,
		hdmitx_red, hdmitx_grn, hdmitx_blu,
		set_hdmi_delay, actual_hdmi_delay,
		pix_reset_n, pxrx_locked,
		w_pxclk_sel
@MAIN.PORTLIST=
		// HDMI control ports
		i_hdmiclk, i_pixclk,
		i_hdmi_red, i_hdmi_grn, i_hdmi_blu,
		o_hdmi_red, o_hdmi_grn, o_hdmi_blu,
		o_hdmi_iodelay, i_hdmi_iodelay,
		o_pix_reset_n, i_pxpll_locked,
		o_pxclk_sel
@MAIN.IODECL=
	// @$(PREFIX) declarations
	// {{{
	input	wire		i_hdmiclk, i_pixclk;
	input	wire	[9:0]	i_hdmi_red, i_hdmi_grn, i_hdmi_blu;
	output	wire	[9:0]	o_hdmi_red, o_hdmi_grn, o_hdmi_blu;
	output	wire	[14:0]	o_hdmi_iodelay;
	input	wire	[14:0]	i_hdmi_iodelay;
	output	wire		o_pix_reset_n;
	input	wire		i_pxpll_locked;
	output	wire	[1:0]	o_pxclk_sel;
	// }}}
@MAIN.DEFNS=
	// Verilator lint_off UNUSED
	wire	[31:0]	hdmiclr_debug;
	// Verilator lint_on  UNUSED
@MAIN.INSERT=
	////////////////////////////////////////////////////////////////////////
	//
	// HDMI Video processing pipeline
	// {{{

	vidpipe #(
		.AW(@$(MASTER.BUS.AWID)),
		.DW(@$(MASTER.BUS.WIDTH))
	) u_@$(PREFIX) (
		.i_clk(i_clk), .i_reset(i_reset),
		@$(SLAVE.ANSIPORTLIST),
		.i_hdmiclk(i_hdmiclk),
		.i_siclk(i_siclk),
		.i_pixclk(i_pixclk),
		.i_hdmi_red(i_hdmi_red), .i_hdmi_grn(i_hdmi_grn),
				.i_hdmi_blu(i_hdmi_blu),
		@$(MASTER.ANSIPORTLIST),
		.o_hdmi_red(o_hdmi_red), .o_hdmi_grn(o_hdmi_grn),
				.o_hdmi_blu(o_hdmi_blu),
		.o_pix_reset_n(o_pix_reset_n),
		.i_pxpll_locked(i_pxpll_locked),
		.o_pxclk_sel(o_pxclk_sel),
		.o_iodelay(o_hdmi_iodelay),
		.i_iodelay(i_hdmi_iodelay),
		//
		.o_pixdebug(hdmiclr_debug)
	);

	// }}}
@REGS.NOTE=// HDMI video processing pipe registers
@REGS.N=21
@REGS.0=   0  R_@$(DEVID) @$(DEVID) VIDCTRL
@REGS.1=   1  R_HDMIFREQ  HDMIFREQ
@REGS.2=   2  R_SIFREQ    SIFREQ
@REGS.3=   3  R_PXFREQ    PXFREQ
@REGS.4=   4  R_INSIZE    INSIZE
@REGS.5=   5  R_INPORCH   INPORCH
@REGS.6=   6  R_INSYNC    INSYNC
@REGS.7=   7  R_INRAW     INRAW
@REGS.8=   8  R_HDMISIZE  HDMISIZE
@REGS.9=   9  R_HDMIPORCH HDMIPORCH
@REGS.10= 10  R_HDMISYNC  HDMISYNC
@REGS.11= 11  R_HDMIRAW   HDMIRAW
@REGS.12= 12  R_OVADDR    OVADDR
@REGS.13= 13  R_OVSIZE    OVSIZE
@REGS.14= 14  R_OVOFFSET  OVOFFSET
@REGS.15= 15  R_FPS       FPS
@REGS.16= 16  R_SYNCWORD  VSYNCWORD
@REGS.17= 17  R_VIDRCAP   VIDRCAP
@REGS.18= 18  R_VIDGCAP   VIDGCAP
@REGS.19= 19  R_VIDBCAP   VIDBCAP
@REGS.20=512  R_CMAP      CMAP
@XDC.INSERT=
set_property CLOCK_DEDICATED_ROUTE FALSE [get_nets u_xpxclk/o_hdmirx_clk]
set_false_path -from [get_pins u_xpxclk/prepx/r_sel_reg/C] -to [get_pins u_xpxclk/prepx/u_bufg/S0]
set_false_path -from [get_pins u_xpxclk/lclpx/r_sel_reg/C] -to [get_pins u_xpxclk/lclpx/u_bufg/S0]
set_max_delay -datapath_only -from [get_cells -hier -filter {NAME=~thedesign/u_hdmi/u_sys2px/a_data*}] -to [get_cells -hier -filter {NAME=~thedesign/u_hdmi/u_sys2px/o_b_data*}] 5
set_max_delay -datapath_only -from [get_cells -hier -filter {NAME=~thedesign/u_hdmi/u_sys2px/a_req*}] -to [get_cells -hier -filter {NAME=~thedesign/u_hdmi/u_sys2px/b_pipe*}] 5
set_max_delay -datapath_only -from [get_cells -hier -filter {NAME=~thedesign/u_hdmi/u_sys2px/b_last*}] -to [get_cells -hier -filter {NAME=~thedesign/u_hdmi/u_sys2px/a_pipe*}] 5
##
set_max_delay -datapath_only -from [get_cells -hier -filter {NAME=~thedesign/u_hdmi/u_px2sys/a_req*}] -to [get_cells -hier -filter {NAME=~thedesign/u_hdmi/u_px2sys/b_pipe*}] 5
set_max_delay -datapath_only -from [get_cells -hier -filter {NAME=~thedesign/u_hdmi/u_px2sys/a_data*}] -to [get_cells -hier -filter {NAME=~thedesign/u_hdmi/u_px2sys/o_b_data*}] 5
set_max_delay -datapath_only -from [get_cells -hier -filter {NAME=~thedesign/u_hdmi/u_px2sys/b_last*}] -to [get_cells -hier -filter {NAME=~thedesign/u_hdmi/u_px2sys/a_pipe*}] 5
##
set_max_delay -datapath_only -from [get_cells -hier -filter {NAME=~thedesign/u_hdmi/u_framebuf/GEN_ASYNC_FIFO.pxfifo/wgray_r*}] -to [get_cells -hier -filter {NAME=~thedesign/u_hdmi/u_framebuf/GEN_ASYNC_FIFO.pxfifo/wgray_cross*}] 5
set_max_delay -datapath_only -from [get_cells -hier -filter {NAME=~thedesign/u_hdmi/u_framebuf/GEN_ASYNC_FIFO.pxfifo/rgray_r*}] -to [get_cells -hier -filter {NAME=~thedesign/u_hdmi/u_framebuf/GEN_ASYNC_FIFO.pxfifo/rgray_cross*}] 5
set_max_delay -datapath_only -from [get_cells -hier -filter {NAME=~thedesign/u_hdmi/pix_reset_sys_r*}] -to [get_cells -hier -filter {NAME=~thedesign/u_hdmi/pix_reset_pipe*}] 5
set_max_delay -datapath_only -from [get_cells -hier -filter {NAME=~thedesign/u_hdmi/pix_reset_sys_r*}] -to [get_cells -hier -filter {NAME=~thedesign/u_hdmi/pix_reset_r*}] 5
set_max_delay -datapath_only -from [get_cells -hier -filter {NAME=~thedesign/u_hdmi/pix_reset_sys_r*}] -to [get_cells -hier -filter {NAME=~thedesign/u_hdmi/u_framebuf/GEN_ASYNC_FIFO.r_pix_reset*}] 5
set_max_delay -datapath_only -from [get_cells -hier -filter {NAME=~thedesign/u_hdmi/u_mem2pix/cmap*}] -to [get_cells -hier -filter {NAME=~thedesign/u_hdmi/u_mem2pix/cmap*}] 5
set_max_delay -datapath_only -from [get_cells -hier -filter {NAME=~thedesign/u_hdmi/u_hdmi2vga/bitsync/*async/pixloc/*}] -to [get_cells -hier -filter {NAME=~thedesign/u_hdmi/pre_wb_data*}] 5
set_max_delay -datapath_only -from [get_cells -hier -filter {NAME=~thedesign/u_hdmi/u_hdmi2vga/bitsync/*async/sync_valid*}] -to [get_cells -hier -filter {NAME=~thedesign/u_hdmi/pre_wb_data*}] 5
set_max_delay -datapath_only -from [get_cells -hier -filter {NAME=~thedesign/u_hdmi/u_hdmi2vga/bitsync/all_locked*}] -to [get_cells -hier -filter {NAME=~thedesign/u_hdmi/pre_wb_data*}] 5
set_max_delay -datapath_only -from [get_cells -hier -filter {NAME=~thedesign/u_hdmi/u_pixclk_counter/avgs*}] -to [get_cells -hier -filter {NAME=~thedesign/u_hdmi/u_pixclk_counter/q_v*}] 5
set_max_delay -datapath_only -from [get_cells -hier -filter {NAME=~thedesign/u_hdmi/u_new_frame/a_req*}] -to [get_cells -hier -filter {NAME=~thedesign/u_hdmi/u_new_frame/b_pipe*}] 5
set_max_delay -datapath_only -from [get_cells -hier -filter {NAME=~thedesign/u_hdmi/u_new_frame/b_last*}] -to [get_cells -hier -filter {NAME=~thedesign/u_hdmi/u_new_frame/a_pipe*}] 5
##
set_max_delay -datapath_only -from [get_cells -hier -filter {NAME=~u_hdmirx_*/the_deserdes/delay*}] -to [get_cells -hier -filter {NAME=~thedesign/u_hdmi/pre_wb_data*}] 5
set_max_delay -datapath_only -from [get_cells -hier -filter {NAME=~thedesign/u_hdmi/u_sys2px/o_b_data*}] -to [get_cells -hier -filter {NAME=~thedesign/u_hdmi/pre_wb_data*}] 5
@BDEF.INCLUDE=
#include <stdint.h>
@BDEF.DEFN=
#ifndef @$(DEVID)_H
#define @$(DEVID)_H

typedef struct __attribute__((packed)) VIDMODE_S {
	uint16_t	m_height,     m_width;
	uint16_t	m_vporch,     m_hporch;
	uint16_t	m_vsync,      m_hsync;
	uint16_t	m_raw_height, m_raw_width;
} VIDMODE;

typedef struct __attribute__((packed)) @$(DEVID)_S {
	uint32_t	v_control, v_hdmifreq, v_sifreq, v_pxfreq;
	VIDMODE		v_in, v_src;
	const char	*v_overlay;
	uint16_t	v_ovheight, v_ovmemwords;
	uint16_t	v_ovypos,  v_ovhpos;
	unsigned	v_fps;
	unsigned	v_syncword;
	uint32_t	v_unused[512-17];
	uint32_t	v_clrmap[256];
} @$(DEVID);

#endif // @$(DEVID)_H
@BDEF.IONAME=_@$(PREFIX)
@BDEF.IOTYPE=@$(DEVID)
@BDEF.OSDEF=_BOARD_HAS_@$(DEVID)
@BDEF.OSVAL=static volatile @$(BDEF.IOTYPE) *const @$(BDEF.IONAME) = ((@$(BDEF.IOTYPE) *)@$[0x%08x](REGBASE));
@RTL.MAKE.GROUP=HDMI
@RTL.MAKE.SUBD=hdmi
@RTL.MAKE.FILES= axishdmi.v axisvoverlay.v cecbridge.v hdmi2vga.v
		hdmibitsync.v hdmipixelsync.v sync2stream.v synccount.v
		tfrstb.v tfrvalue.v tmdsdecode.v tmdsencode.v vid_empty.v
		vid_mux.v vidpipe.v vidstream2pix.v vid_wbframebuf.v
		xhdmiin_deserdes.v xhdmiin.v xhdmiout.v xpxclk.v
@CLOCK.NAME=pixclk
@CLOCK.WIRE=i_pixclk
@CLOCK.FREQUENCY=40000000
@SIM.CLOCK=pixclk
@SIM.INCLUDE=
#include "hdmisim.h"
@SIM.DEFNS=
#ifdef @$(ACCESS)
	HDMIWIN *m_hdmitx;
#endif	// @$(ACCESS)
@SIM.INIT=
#ifdef	@$(ACCESS)
		m_hdmitx = new HDMIWIN(800, 600);
#endif	// @$(ACCESS)
@SIM.METHODS=
	void	connect_idler(void) {
		Glib::signal_idle().connect(
			sigc::mem_fun((*this),&MAINTB::on_tick));
	}

	bool	on_tick(void) {
		for(int i=0; i<15; i++)
			tick();
		return true;
	}
@SIM.TICK=
#ifdef	@$(ACCESS)
		// Simulate an external HDMI monitor
		(*m_hdmitx)(m_core->o_hdmi_blu, m_core->o_hdmi_grn, m_core->o_hdmi_red);
#endif	// @$(ACCESS)
