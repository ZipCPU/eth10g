################################################################################
##
## Filename: 	gpio.txt
## {{{
## Project:	10Gb Ethernet switch
##
## Purpose:	
##
## Creator:	Dan Gisselquist, Ph.D.
##		Gisselquist Technology, LLC
##
################################################################################
## }}}
## Copyright (C) 2023, Gisselquist Technology, LLC
## {{{
## This file is part of the ETH10G project.
##
## The ETH10G project contains free software and gateware, licensed under the
## terms of the 3rd version of the GNU General Public License as published by
## the Free Software Foundation.
##
## This project is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY or
## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
## for more details.
##
## You should have received a copy of the GNU General Public License along
## with this program.  (It's in the $(ROOT)/doc directory.  Run make with no
## target there if the PDF file isn't present.)  If not, see
## <http://www.gnu.org/licenses/> for a copy.
## }}}
## License:	GPL, v3, as defined and found on www.gnu.org,
## {{{
##		http://www.gnu.org/licenses/gpl.html
##
################################################################################
##
## }}}
@PREFIX=gpio
@DEVID=GPIO
@NADDR=1
@ACCESS=@$(DEVID)_ACCESS
@NGPI=16
@NGPO=8
@SLAVE.TYPE=SINGLE
@SLAVE.BUS=wb32
# @SINGLE.OUTPUTS= o_gpio
# @SINGLE.INPUTS=  i_gpio
@INT.GPIO.WIRE=gpio_int
@INT.GPIO.PIC=altpic
@TOP.PORTLIST=
		// @$(DEVID) ports
		i_pi_reset_n, i_soft_reset, i_hdmitx_hpd_n,
		o_tp, o_si5324_rst, i_si5324_int,
		o_hdmirx_hpd_n
@TOP.IODECL=
	// GPIO wires
	input	wire		i_pi_reset_n, i_soft_reset, i_hdmitx_hpd_n;
	output	wire	[3:0]	o_tp;
	output	wire		o_si5324_rst, o_hdmirx_hpd_n;
	input	wire		i_si5324_int;
@TOP.DEFNS=
	// GPIO declarations.  The two wire busses are just virtual lists of
	// input (or output) ports.
	wire	[@$(NGPI)-1:0]	i_@$(PREFIX);
	wire	[@$(NGPO)-1:0]	o_@$(PREFIX);
@TOP.MAIN=
		// GPIO wires
		i_@$(PREFIX), o_@$(PREFIX)
@TOP.INSERT=
	////////////////////////////////////////////////////////////////////////
	//
	// GPIO adjustments
	// {{{
	// Set to '1' when there's something to say.  Hence, the reset
	//	inputs will be '1' when the reset is active, the HDMI detect
	//	will be '1' when an HDMI is detected, the PLL lock signals
	//	will be '1' when not locked, etc.
	assign	i_@$(PREFIX) = { 10'h0,
`ifdef	VIDPIPE_ACCESS
		!pxrx_locked,
`else
		1'b1,
`endif
		!i_hdmitx_hpd_n,
		i_si5324_int,!sysclk_locked,!i_pi_reset_n,i_soft_reset };
	assign	o_tp = o_gpio[3:0];
	assign	o_si5324_rst = o_gpio[4];
	assign	o_hdmirx_hpd_n = !o_gpio[5];
	// o_trace = o_gpio[6]; // But this is for simulation only, so ignore
	// o_error = o_gpio[7]; // SIM ONLY: Internal error detection
	// }}}
@MAIN.PORTLIST=
		// GPIO ports
		i_@$(PREFIX), o_@$(PREFIX)
@MAIN.IODECL=
	localparam	NGPI = @$(NGPI), NGPO=@$(NGPO);
	// @$(DEVID) ports
	input	wire	[(NGPI-1):0]	i_@$(PREFIX);
	output	wire	[(NGPO-1):0]	o_@$(PREFIX);
@MAIN.DEFNS=
@MAIN.INSERT=
	////////////////////////////////////////////////////////////////////////
	//
	// @$(DEVID)
	// {{{
	// This interface should allow us to control up to 16 @$(DEVID) inputs,
	// and another 16 @$(DEVID) outputs.  The interrupt trips when any of
	// the inputs changes.  (Sorry, which input isn't (yet) selectable.)
	//
	// Initially set:
	//	4x Test points to zero
	//	SI5324 reset to 0 (active)
	//	HDMI RX as *not* present
	//	*TRACE* defaults to OFF
	//	*ERROR* defaults to NONE (0)
	localparam [NGPO-1:0]	INITIAL_@$(DEVID) = 8'h20;

	wbgpio	#(
		.NIN(NGPI), .NOUT(NGPO), .DEFAULT(INITIAL_@$(DEVID))
	) @$(PREFIX)i(
		// {{{
		i_clk, @$(SLAVE.PORTLIST),
		i_@$(PREFIX), o_@$(PREFIX), @$(PREFIX)_int
		// }}}
	);

	// }}}
@REGS.N=1
@REGS.0= 0 R_@$(DEVID) @$(DEVID) GPI GPO
@BDEF.DEFN=
//
// @$(DEVID) input wires
//
#define	GPIO_SOFT_RESET		0x000010000
#define	GPIO_PI_RESET		0x000020000
#define	GPIO_SYSCLK_LOCKED	0x000040000
#define	GPIO_SI_INT		0x000080000
#define	GPIO_HDMITXD		0x000100000
#define	GPIO_PIXCLK_LOCKED	0x000200000
//
// @$(DEVID) output wires
//
#define	@$(DEVID)_SET(WIRE)	(((WIRE)<<16)|(WIRE))
#define	@$(DEVID)_CLR(WIRE)	 ((WIRE)<<16)
//
#define	GPIO_TP0		0x000000001
#define	GPIO_TP1		0x000000002
#define	GPIO_TP2		0x000000004
#define	GPIO_TP3		0x000000008
#define	GPIO_SIRESET		0x000000010
#define	GPIO_HDMIRXD		0x000000020
#define	GPIO_TRACE		0x000000040	// SIM ONLY
#define	GPIO_ERROR		0x000000080	// SIM ONLY
//
#define	GPIO_TP0_SET		GPIO_SET(GPIO_TP0)
#define	GPIO_TP0_CLR		GPIO_CLR(GPIO_TP0)
#define	GPIO_TP1_SET		GPIO_SET(GPIO_TP1)
#define	GPIO_TP1_CLR		GPIO_CLR(GPIO_TP1)
#define	GPIO_TP2_SET		GPIO_SET(GPIO_TP2)
#define	GPIO_TP2_CLR		GPIO_CLR(GPIO_TP2)
#define	GPIO_TP3_SET		GPIO_SET(GPIO_TP3)
#define	GPIO_TP3_CLR		GPIO_CLR(GPIO_TP3)
#define	GPIO_SIRESET_SET	GPIO_SET(GPIO_SIRESET)
#define	GPIO_SIRESET_CLR	GPIO_CLR(GPIO_SIRESET)
#define	GPIO_HDMIRXD_SET	GPIO_SET(GPIO_HDMIRXD)
#define	GPIO_HDMIRXD_CLR	GPIO_CLR(GPIO_HDMIRXD)
#define	GPIO_TRACE_SET		GPIO_SET(GPIO_TRACE)
#define	GPIO_TRACE_CLR		GPIO_CLR(GPIO_TRACE)
#define	GPIO_ERROR_SET		GPIO_SET(GPIO_ERROR)
#define	GPIO_ERROR_CLR		GPIO_CLR(GPIO_ERROR)
#define	SET_TRACE		(*_@$(PREFIX)) = GPIO_TRACE_SET
#define	CLR_TRACE		(*_@$(PREFIX)) = GPIO_TRACE_CLR
@BDEF.IONAME=	_@$(PREFIX)
@BDEF.IOTYPE=	unsigned
@BDEF.OSDEF=	_BOARD_HAS_@$(DEVID)
@BDEF.OSVAL=	static volatile @$(BDEF.IOTYPE) *const @$(BDEF.IONAME) = ((@$(BDEF.IOTYPE) *)@$[0x%08x](REGBASE));
@RTL.MAKE.FILES=wbgpio.v
@RTL.MAKE.GROUP=@$(DEVID)
@SIM.CLOCK=clk
@SIM.INIT=
		m_core->i_gpio = 16;
@SIM.TICK=
		pausetrace((m_core->o_@$(PREFIX) & 0x040) ? false:true);
