################################################################################
##
## Filename: 	mem_full.txt
## {{{
## Project:	10Gb Ethernet switch
##
## Purpose:	Describes a memory model containing 1) flash RAM for booting,
##		2) block RAM for high-speed (Kernel) operations, and 3) DDR3
##	SDRAM for everything else.  This will be used to create a board.ld
##	linker script that can be used to link ZipCPU programs.
##
##
## Creator:	Dan Gisselquist, Ph.D.
##		Gisselquist Technology, LLC
##
################################################################################
## }}}
## Copyright (C) 2023, Gisselquist Technology, LLC
## {{{
## This file is part of the ETH10G project.
##
## The ETH10G project contains free software and gateware, licensed under the
## Apache License, Version 2.0 (the "License").  You may not use this project,
## or this file, except in compliance with the License.  You may obtain a copy
## of the License at
## }}}
##	http://www.apache.org/licenses/LICENSE-2.0
## {{{
## Unless required by applicable law or agreed to in writing, files
## distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
## WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
## License for the specific language governing permissions and limitations
## under the License.
##
################################################################################
##
## }}}
@PREFIX=mem_full
@MASTER.TYPE=SCRIPT
@MASTER.BUS=wbwide
@LD.FILE=board.ld
@LD.DEFNS=
/* LD.DEFNS from @$(PREFIX) */
_kram  = 0; /* No high-speed kernel RAM */
_ram   = ORIGIN(bkram);
_rom   = 0;	/* Should be ORIGIN(flash); */
_top_of_stack = ORIGIN(bkram) + LENGTH(bkram);

@LD.SCRIPT=
/* LD.SCRIPT from @$(PREFIX) */
SECTIONS
{
       .ramcode ORIGIN(sdram) : ALIGN(4) {
               _boot_address = .;
               _kram_start = .;
               _kram_end = .;
       		_ram_image_start = . ;
               *(.start) *(.boot)
               *(.kernel)
               *(.text.startup)
               *(.text*)
               *(.rodata*) *(.strings)
               *(.data) *(COMMON)
               }> sdram
       _ram_image_end = . ;
       .bss : ALIGN_WITH_INPUT {
               *(.bss)
               _bss_image_end = . ;
               } > sdram
       _top_of_heap = .;
}
#
