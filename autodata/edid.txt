################################################################################
##
## Filename:	autodata/edid.txt
## {{{
## Project:	10Gb Ethernet switch
##
## Purpose:	Collect EDID data from the HDMI TX bus to forward it to the
##		HDMI RX bus.  If the I2C CPU is not present to read from the
##	HDMI TX bus, data will instead be collected from WB only.
##
## Creator:	Dan Gisselquist, Ph.D.
##		Gisselquist Technology, LLC
##
################################################################################
## }}}
## Copyright (C) 2023, Gisselquist Technology, LLC
## {{{
## This file is part of the ETH10G project.
##
## The ETH10G project contains free software and gateware, licensed under the
## terms of the 3rd version of the GNU General Public License as published by
## the Free Software Foundation.
##
## This project is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY or
## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
## for more details.
##
## You should have received a copy of the GNU General Public License along
## with this program.  (It's in the $(ROOT)/doc directory.  Run make with no
## target there if the PDF file isn't present.)  If not, see
## <http://www.gnu.org/licenses/> for a copy.
## }}}
## License:	GPL, v3, as defined and found on www.gnu.org,
## {{{
##		http://www.gnu.org/licenses/gpl.html
##
################################################################################
##
## }}}
@PREFIX=edid
@DEVID=EDID
@LGMEMSZ=8
@$NADDR=256 / 4
@ACCESS=@$(DEVID)_ACCESS
@SLAVE.BUS=wb32
@SLAVE.TYPE=DOUBLE
@SLAVE.PREFIX=@$(SLAVE.BUS.NAME)_@$(PREFIX)s
@WBP=@$(SLAVE.BUS.PREFIX)
@TOP.PORTLIST=
			io_hdmirx_scl, io_hdmirx_sda
@TOP.IODECL=
	inout	wire	io_hdmirx_scl, io_hdmirx_sda;
@TOP.DEFNS=
	// I2CCPU definitions
	// {{{
	wire	i_@$(PREFIX)_sda, i_@$(PREFIX)_scl,
		o_@$(PREFIX)_sda, o_@$(PREFIX)_scl;
	// }}}
@TOP.INSERT=
	////////////////////////////////////////////////////////////////////////
	//
	// EDID I2C IO buffers
	// {{{

	// We need these in order to (properly) ensure the high impedance
	// states (pull ups) of the I2C I/O lines.  Our goals are:
	//
	//	o_@$(PREFIX)_X	io_@$(PREFIX)_X		Derived:T
	//	1'b0		1'b0			1'b0
	//	1'b1		1'bz			1'b1
	//
	IOBUF @$(PREFIX)sclp(
		// {{{
		.I(1'b0),
		.T(o_@$(PREFIX)_scl),
		.O(i_@$(PREFIX)_scl),
		.IO(io_hdmirx_scl)
		// }}}
	);

	IOBUF @$(PREFIX)sdap(
		// {{{
		.I(1'b0),
		.T(o_@$(PREFIX)_sda),
		.O(i_@$(PREFIX)_sda),
		.IO(io_hdmirx_sda)
		// }}}
	);

	// }}}
@TOP.MAIN=
		// I2CCPU
		i_@$(PREFIX)_sda, i_@$(PREFIX)_scl,
		o_@$(PREFIX)_sda, o_@$(PREFIX)_scl
@MAIN.PORTLIST=
			i_@$(PREFIX)_sda, i_@$(PREFIX)_scl,
			o_@$(PREFIX)_sda, o_@$(PREFIX)_scl
@MAIN.IODECL=
	// I2C Port declarations
	// {{{
	input	wire	i_@$(PREFIX)_sda, i_@$(PREFIX)_scl;
	output	wire	o_@$(PREFIX)_sda, o_@$(PREFIX)_scl;
	// }}}
@MAIN.DEFNS=
	// EDID I2C Controller
	// {{{
	// Verilator lint_off UNUSED
	// localparam	I2C_ID_WIDTH=(@$(IDW) == 0) ? 1 : @$(IDW);

	wire		@$(PREFIX)_valid, @$(PREFIX)_ready, @$(PREFIX)_last;
	wire	[7:0]	@$(PREFIX)_data;
	// wire	[I2C_ID_WIDTH-1:0]	@$(PREFIX)_id;

	wire	[31:0]	@$(PREFIX)_debug;
	// Verilator lint_on  UNUSED
	// }}}
@MAIN.INSERT=
	////////////////////////////////////////////////////////////////////////
	//
	// The EDID I2C Slave Controller
	// {{{

	wbi2cslave #(
		.WB_READ_ONLY(1'b0),
		.MEM_ADDR_BITS(@$(LGMEMSZ)),
		.I2C_READ_ONLY(1'b1)
	) u_@$(PREFIX) (
		// {{{
		.i_clk(@$(SLAVE.BUS.CLOCK.WIRE)), .i_reset(@$(SLAVE.BUS.CLOCK.RESET)),
		@$(SLAVE.ANSIPORTLIST),
		//
		.s_valid(@$(PREFIX)_valid), .s_ready(@$(PREFIX)_ready),
			.s_data(@$(PREFIX)_data), .s_last(@$(PREFIX)_last),
		//
		.i_i2c_sda(i_@$(PREFIX)_sda), .i_i2c_scl(i_@$(PREFIX)_scl),
		.o_i2c_sda(o_@$(PREFIX)_sda), .o_i2c_scl(o_@$(PREFIX)_scl),
		//
		.o_dbg(@$(PREFIX)_debug)
		// }}}
	);

	assign	@$(PREFIX)_valid = i2c_valid && (i2c_id == 1);
	assign	@$(PREFIX)_data  = i2c_data;
	assign	@$(PREFIX)_last  = i2c_last;
	// }}}
@MAIN.ALT=
	assign	o_@$(PREFIX)_scl = 1'b1;
	assign	o_@$(PREFIX)_sda = 1'b1;
##
## regdefs.h / regdefs.cpp
##
## @REGS.N=4
## @REGS.0= 0 R_@$(DEVID) @$(DEVID) @$(DEVID)_CTRL @$(DEVID)CTRL
## @REGS.1= 1 R_@$(DEVID)_OVW  @$(DEVID)_OVW @$(DEVID)_OVERRIDE
## @REGS.2= 2 R_@$(DEVID)_ADDR @$(DEVID)_ADDR @$(DEVID)_ADDRESS
## @REGS.3= 3 R_@$(DEVID)_CKCOUNT  @$(DEVID)CLK @$(DEVID)_CKCOUNT
##
## board.h
##
@BDEF.DEFN=
@BDEF.IONAME=_@$(PREFIX)
@BDEF.IOTYPE=char
@BDEF.OSDEF=_BOARD_HAS_@$(DEVID)
@BDEF.OSVAL=static volatile @$(BDEF.IOTYPE) *const @$(BDEF.IONAME)=((@$(BDEF.IOTYPE) *)@$[0x%08x](REGBASE));
##
## Makefile insert info
##
@RTL.MAKE.GROUP=@$(DEVID)
@RTL.MAKE.SUBD=wbi2c
@RTL.MAKE.FILES=wbi2cslave.v
##
