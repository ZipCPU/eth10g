////////////////////////////////////////////////////////////////////////////////
//
// Filename:	./board.h
// {{{
// Project:	10Gb Ethernet switch
//
// Computer Generated: This file is computer generated by AUTOFPGA. DO NOT EDIT.
// DO NOT EDIT THIS FILE!
//
// CmdLine:	autofpga -I .: -d -o . allclocks.txt siclk.txt sirefclk.txt global.txt wbdown.txt icape.txt version.txt gpio.txt spio.txt wbuconsole.txt zipmaster.txt bkram.txt ddr3.txt sata.txt routescope.txt i2cscope.txt satascope.txt mem_bkram_only.txt mem_full.txt i2ccpu.txt fan.txt sirefclkcounter.txt
//
// Creator:	Dan Gisselquist, Ph.D.
//		Gisselquist Technology, LLC
//
////////////////////////////////////////////////////////////////////////////////
// }}}
// Copyright (C) 2023-2025, Gisselquist Technology, LLC
// {{{
// This file is part of the ETH10G project.
//
// The ETH10G project contains free software and gateware, licensed under the
// terms of the 3rd version of the GNU General Public License as published by
// the Free Software Foundation.
//
// This project is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// for more details.
//
// You should have received a copy of the GNU General Public License along
// with this program.  (It's in the $(ROOT)/doc directory.  Run make with no
// target there if the PDF file isn't present.)  If not, see
// <http://www.gnu.org/licenses/> for a copy.
// }}}
// License:	GPL, v3, as defined and found on www.gnu.org,
// {{{
//		http://www.gnu.org/licenses/gpl.html
//
////////////////////////////////////////////////////////////////////////////////
//
// }}}
#ifndef	BOARD_H
#define	BOARD_H

// And, so that we can know what is and isn't defined
// from within our main.v file, let's include:
#include <design.h>

////////////////////////////////////////////////////////////////////////////////
//
// ZipCPU defines and macros
// {{{
#include <design.h>

#define	_HAVE_ZIPSYS
#define	PIC	_zip->z_pic

#ifdef	INCLUDE_ZIPCPU
#ifdef INCLUDE_DMA_CONTROLLER
#define	_HAVE_ZIPSYS_DMA
#endif	// INCLUDE_DMA_CONTROLLER
#ifdef INCLUDE_ACCOUNTING_COUNTERS
#define	_HAVE_ZIPSYS_PERFORMANCE_COUNTERS
#endif	// INCLUDE_ACCOUNTING_COUNTERS
#endif // INCLUDE_ZIPCPU
// }}}


#ifndef	FAN_H
#define	FAN_H
	////////////////////////////////////////////////////////////////////////
	//
	// I2C CPU data structures
	// {{{
	////////////////////////////////////////////////////////////////////////
	//
	//
typedef struct  FAN_S        {
	unsigned	fan_fpgapwm, fan_syspwm, fan_tach;
	int		fan_temp;
	unsigned	temp_control, temp_override, temp_address,
			temp_clkcount;
} FAN;

#endif	// FAN_H
	// }}}


#define	SPIO_BTNC	0x01000
#define	SPIO_BTND	0x00800
#define	SPIO_BTNL	0x00400
#define	SPIO_BTNR	0x00200
#define	SPIO_BTNU	0x00100


//
// GPIO input wires
//
#define	GPIO_SOFT_RESET		0x000010000
#define	GPIO_PI_RESET		0x000020000
#define	GPIO_SYSCLK_LOCKED	0x000040000
#define	GPIO_SI_INT		0x000080000
#define	GPIO_HDMITXD		0x000100000
#define	GPIO_PIXCLK_LOCKED	0x000200000
#define	GPIO_DDRCALIB_COMPLETE	0x000400000
//
// GPIO output wires
//
#define	GPIO_SET(WIRE)	(((WIRE)<<16)|(WIRE))
#define	GPIO_CLR(WIRE)	 ((WIRE)<<16)
//
#define	GPIO_TP0		0x000000001
#define	GPIO_TP1		0x000000002
#define	GPIO_TP2		0x000000004
#define	GPIO_TP3		0x000000008
#define	GPIO_SIRESET		0x000000010
#define	GPIO_HDMIRXD		0x000000020
#define	GPIO_TRACE		0x000000040	// SIM ONLY
#define	GPIO_ERROR		0x000000080	// SIM ONLY
//
#define	GPIO_TP0_SET		GPIO_SET(GPIO_TP0)
#define	GPIO_TP0_CLR		GPIO_CLR(GPIO_TP0)
#define	GPIO_TP1_SET		GPIO_SET(GPIO_TP1)
#define	GPIO_TP1_CLR		GPIO_CLR(GPIO_TP1)
#define	GPIO_TP2_SET		GPIO_SET(GPIO_TP2)
#define	GPIO_TP2_CLR		GPIO_CLR(GPIO_TP2)
#define	GPIO_TP3_SET		GPIO_SET(GPIO_TP3)
#define	GPIO_TP3_CLR		GPIO_CLR(GPIO_TP3)
#define	GPIO_SIRESET_SET	GPIO_SET(GPIO_SIRESET)
#define	GPIO_SIRESET_CLR	GPIO_CLR(GPIO_SIRESET)
#define	GPIO_HDMIRXD_SET	GPIO_SET(GPIO_HDMIRXD)
#define	GPIO_HDMIRXD_CLR	GPIO_CLR(GPIO_HDMIRXD)
#define	GPIO_TRACE_SET		GPIO_SET(GPIO_TRACE)
#define	GPIO_TRACE_CLR		GPIO_CLR(GPIO_TRACE)
#define	GPIO_ERROR_SET		GPIO_SET(GPIO_ERROR)
#define	GPIO_ERROR_CLR		GPIO_CLR(GPIO_ERROR)
#define	SET_TRACE		(*_gpio) = GPIO_TRACE_SET
#define	CLR_TRACE		(*_gpio) = GPIO_TRACE_CLR


// Offsets for the ICAPE2 interface
#define	CFG_CRC		0
#define	CFG_FAR		1
#define	CFG_FDRI	2
#define	CFG_FDRO	3
#define	CFG_CMD		4
#define	CFG_CTL0	5
#define	CFG_MASK	6
#define	CFG_STAT	7
#define	CFG_LOUT	8
#define	CFG_COR0	9
#define	CFG_MFWR	10
#define	CFG_CBC		11
#define	CFG_IDCODE	12
#define	CFG_AXSS	13
#define	CFG_COR1	14
#define	CFG_WBSTAR	16
#define	CFG_TIMER	17
#define	CFG_BOOTSTS	22
#define	CFG_CTL1	24
#define	CFG_BSPI	31


#ifndef	WBSCOPE_H
#define	WBSCOPE_H

#define	WBSCOPE_NO_RESET	0x80000000u
#define	WBSCOPE_STOPPED		0x40000000u
#define	WBSCOPE_TRIGGERED	0x20000000u
#define	WBSCOPE_PRIMED		0x10000000u
#define	WBSCOPE_TRIGGER		(WBSCOPE_NO_RESET|0x08000000u)
#define	WBSCOPE_MANUAL		(WBSCOPE_TRIGGER)
#define	WBSCOPE_DISABLE		0x04000000u

typedef	struct	WBSCOPE_S {
	volatile unsigned s_ctrl, s_data;
} WBSCOPE;
#endif




typedef	struct	DDR3_PHY_S {
	unsigned	ph_something;
} DDR3_PHY;



#ifndef	I2CDMA_H
#define	I2CDMA_H
	////////////////////////////////////////////////////////////////////////
	//
	// I2C DMA data structures
	// {{{
	////////////////////////////////////////////////////////////////////////
	//
	//


typedef struct  I2CDMA_S        {
	unsigned	id_control, id_current, id_base, id_memlen;
} I2CDMA;

#endif	// I2CDMA_H
	// }}}


typedef struct  CONSOLE_S {
	volatile unsigned	u_setup;
	volatile unsigned	u_fifo;
	volatile unsigned	u_rx, u_tx;
} CONSOLE;

#define	_uart_txbusy	((_uart->u_fifo & 0x10000)==0)
#define	_uart_txidle	((_uart->u_tx   & 0x100)  ==0)


#define	ALTPIC(A)	(1<<(A))


	////////////////////////////////////////////////////////////////////////
	//
	// I2C CPU data structures
	// {{{
	////////////////////////////////////////////////////////////////////////
	//
	//
#ifndef	I2CCPU_H
#define	I2CCPU_H

#define	I2CC_WAITING	0x00800000	// True if waiting for synch signal
#define	I2CC_HALT	0x00400000	// Halt request
#define	I2CC_ABORT	0x00200000	// Abort
#define	I2CC_ERROR	0x00100000
#define	I2CC_HARDHALT	0x00080000
#define	I2CC_SCL	0x00000200
#define	I2CC_SDA	0x00000100
#define I2CC_STOPPED	I2CC_HARDHALT
#define I2CC_FAULT	(I2CC_ERROR | I2CC_ABORT)
#define I2CC_CLEAR	(I2CC_FAULT | I2CC_HALT)

// For the manual port
#define	I2CC_MANSCL	0x00008000
#define	I2CC_MANSDA	0x00004000
#define	I2CC_MANUAL	0x00000800
#define	I2CC_TVALID	0x00000200
#define	I2CC_TLAST	0x00000100

typedef	struct	I2CCPU_S {
	volatile unsigned	ic_control,
				ic_override,
				ic_address,
				ic_clkcount;
} I2CCPU;

#endif	// I2CCPU_H
	// }}}


#define	SYSPIC(A)	(1<<(A))


#ifndef	SATA_H
#define	SATA_H
	////////////////////////////////////////////////////////////////////////
	//
	// SATA data structure
	// {{{
typedef	struct	SATA_S {
	unsigned	s_cmd, s_lbalo, s_lbahi, s_count;
	unsigned	s_skip[2];
	unsigned	s_addrlo, s_addrhi;
} SATA;
	// }}}
#endif


#ifndef	WBSCOPE_H
#define	WBSCOPE_H

#define	WBSCOPE_NO_RESET	0x80000000u
#define	WBSCOPE_STOPPED		0x40000000u
#define	WBSCOPE_TRIGGERED	0x20000000u
#define	WBSCOPE_PRIMED		0x10000000u
#define	WBSCOPE_TRIGGER		(WBSCOPE_NO_RESET|0x08000000u)
#define	WBSCOPE_MANUAL		(WBSCOPE_TRIGGER)
#define	WBSCOPE_DISABLE		0x04000000u

typedef	struct	WBSCOPE_S {
	volatile unsigned s_ctrl, s_data;
} WBSCOPE;
#endif


#ifndef	WBSCOPE_H
#define	WBSCOPE_H

#define	WBSCOPE_NO_RESET	0x80000000u
#define	WBSCOPE_STOPPED		0x40000000u
#define	WBSCOPE_TRIGGERED	0x20000000u
#define	WBSCOPE_PRIMED		0x10000000u
#define	WBSCOPE_TRIGGER		(WBSCOPE_NO_RESET|0x08000000u)
#define	WBSCOPE_MANUAL		(WBSCOPE_TRIGGER)
#define	WBSCOPE_DISABLE		0x04000000u

typedef	struct	WBSCOPE_S {
	volatile unsigned s_ctrl, s_data;
} WBSCOPE;
#endif


#ifndef	WBSCOPE_H
#define	WBSCOPE_H

#define	WBSCOPE_NO_RESET	0x80000000u
#define	WBSCOPE_STOPPED		0x40000000u
#define	WBSCOPE_TRIGGERED	0x20000000u
#define	WBSCOPE_PRIMED		0x10000000u
#define	WBSCOPE_TRIGGER		(WBSCOPE_NO_RESET|0x08000000u)
#define	WBSCOPE_MANUAL		(WBSCOPE_TRIGGER)
#define	WBSCOPE_DISABLE		0x04000000u

typedef	struct	WBSCOPE_S {
	volatile unsigned s_ctrl, s_data;
} WBSCOPE;
#endif


#ifndef	WBSCOPE_H
#define	WBSCOPE_H

#define	WBSCOPE_NO_RESET	0x80000000u
#define	WBSCOPE_STOPPED		0x40000000u
#define	WBSCOPE_TRIGGERED	0x20000000u
#define	WBSCOPE_PRIMED		0x10000000u
#define	WBSCOPE_TRIGGER		(WBSCOPE_NO_RESET|0x08000000u)
#define	WBSCOPE_MANUAL		(WBSCOPE_TRIGGER)
#define	WBSCOPE_DISABLE		0x04000000u

typedef	struct	WBSCOPE_S {
	volatile unsigned s_ctrl, s_data;
} WBSCOPE;
#endif


#ifdef	REFCLKCOUNTER_ACCESS
#define	_BOARD_HAS_REFCLKCOUNTER
static volatile unsigned *const _sirefclkcounter = ((unsigned *)0x02000150);
#endif	// REFCLKCOUNTER_ACCESS
#ifdef	FAN_ACCESS
#define	_BOARD_HAS_FAN
static volatile FAN *const _fan=((FAN *)0x02000100);
#endif	// FAN_ACCESS
#ifdef	SPIO_ACCESS
#define	_BOARD_HAS_SPIO
static volatile unsigned *const _spio = ((unsigned *)0x02000154);
#endif	// SPIO_ACCESS
#ifdef	GPIO_ACCESS
#define	_BOARD_HAS_GPIO
static volatile unsigned *const _gpio = ((unsigned *)0x02000144);
#endif	// GPIO_ACCESS
#ifdef	CFG_ACCESS
#define	_BOARD_HAS_ICAPTETWO
static volatile unsigned *const _icape = ((unsigned *)0x00000180);
#endif	// CFG_ACCESS
#ifdef	I2CSCOPE_SCOPC
#define	_BOARD_HAS_I2CSCOPE
static volatile WBSCOPE *const _i2cscope = ((WBSCOPE *)0x02000000);
#endif	// I2CSCOPE_SCOPC
#ifdef	VERSION_ACCESS
#define	_BOARD_HAS_VERSION
static volatile unsigned *const _version = ((unsigned *)0x02000158);
#endif	// VERSION_ACCESS
#ifdef	SIREFCLK_ACCESS
#define	_BOARD_HAS_SIREFCLK
static volatile unsigned *const _sirefclk = ((unsigned *)0x0200014c);
#endif	// SIREFCLK_ACCESS
#ifdef	DDR3_PHY_ACCESS
#define	_BOARD_HAS_DDR3_PHY
static volatile DDR3_PHY *const _ddr3_phy = ((DDR3_PHY *)0x02000200);
#endif	// DDR3_PHY_ACCESS
#ifdef	I2CDMA_ACCESS
#define	_BOARD_HAS_I2CDMA
static volatile I2CDMA *const _i2cdma=((I2CDMA *)0x020000c0);
#endif	// I2CDMA_ACCESS
#ifdef	SICLK
#define	_BOARD_HAS_SICLKCOUNTER
static volatile unsigned *const _siclk = ((unsigned *)0x02000148);
#endif	// SICLK
#define	_BOARD_HAS_BUILDTIME
static volatile unsigned *const _buildtime = ((unsigned *)0x02000140);
#ifdef	BUSCONSOLE_ACCESS
#define	_BOARD_HAS_BUSCONSOLE
static volatile CONSOLE *const _uart = ((CONSOLE *)0x020000e0);
#endif	// BUSCONSOLE_ACCESS
#ifdef	I2CCPU_ACCESS
#define	_BOARD_HAS_I2CCPU
static volatile I2CCPU *const _i2c=((I2CCPU *)0x020000a0);
#endif	// I2CCPU_ACCESS
#ifdef	BKRAM_ACCESS
#define	_BOARD_HAS_BKRAM
extern char	_bkram[0x00080000];
#endif	// BKRAM_ACCESS
#ifdef	DDR3_CONTROLLER_ACCESS
#define	_BOARD_HAS_DDR3_CONTROLLER
extern char	_ddr3_controller[0x40000000];
#endif	// DDR3_CONTROLLER_ACCESS
#ifdef	SATA_ACCESS
#define	_BOARD_HAS_SATA
static volatile SATA *const _sata=((SATA *)0x02000120);
#endif	// SATA_ACCESS
#ifdef	ROUTESCOPE_SCOPC
#define	_BOARD_HAS_ROUTESCOPE
static volatile WBSCOPE *const _routescope = ((WBSCOPE *)0x02000020);
#endif	// ROUTESCOPE_SCOPC
#ifdef	SATARSCOPE_SCOPC
#define	_BOARD_HAS_SATARSCOPE
static volatile WBSCOPE *const _satarscope = ((WBSCOPE *)0x02000060);
#endif	// SATARSCOPE_SCOPC
#ifdef	SATALSCOPE_SCOPC
#define	_BOARD_HAS_SATALSCOPE
static volatile WBSCOPE *const _satalscope = ((WBSCOPE *)0x02000040);
#endif	// SATALSCOPE_SCOPC
#ifdef	SATATSCOPE_SCOPC
#define	_BOARD_HAS_SATATSCOPE
static volatile WBSCOPE *const _satatscope = ((WBSCOPE *)0x02000080);
#endif	// SATATSCOPE_SCOPC
//
// Interrupt assignments (2 PICs)
//
// PIC: altpic
#define	ALTPIC_UIC	ALTPIC(0)
#define	ALTPIC_UOC	ALTPIC(1)
#define	ALTPIC_UPC	ALTPIC(2)
#define	ALTPIC_UTC	ALTPIC(3)
#define	ALTPIC_MIC	ALTPIC(4)
#define	ALTPIC_MOC	ALTPIC(5)
#define	ALTPIC_MPC	ALTPIC(6)
#define	ALTPIC_MTC	ALTPIC(7)
#define	ALTPIC_GPIO	ALTPIC(8)
#define	ALTPIC_I2CSCOPE	ALTPIC(9)
#define	ALTPIC_UARTTX	ALTPIC(10)
#define	ALTPIC_UARTRX	ALTPIC(11)
#define	ALTPIC_I2C	ALTPIC(12)
#define	ALTPIC_ROUTESCOPE	ALTPIC(13)
// PIC: syspic
#define	SYSPIC_DMAC	SYSPIC(0)
#define	SYSPIC_JIFFIES	SYSPIC(1)
#define	SYSPIC_TMC	SYSPIC(2)
#define	SYSPIC_TMB	SYSPIC(3)
#define	SYSPIC_TMA	SYSPIC(4)
#define	SYSPIC_ALT	SYSPIC(5)
#define	SYSPIC_SPIO	SYSPIC(6)
#define	SYSPIC_UARTRXF	SYSPIC(7)
#define	SYSPIC_UARTTXF	SYSPIC(8)
#define	SYSPIC_SATA	SYSPIC(9)
#define	SYSPIC_SATARSCOPE	SYSPIC(10)
#define	SYSPIC_SATALSCOPE	SYSPIC(11)
#define	SYSPIC_SATATSCOPE	SYSPIC(12)
#endif	// BOARD_H
